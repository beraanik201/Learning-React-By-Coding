Q1. Write Hello World using Javascript.
=> <!DOCTYPE html>
<html>
  <head>
    <title>Hello World using Javascript</title>
  </head>
  <body>
      <div id="root"></div>
      
      <script>
        const heading = document.createElement('h1');
        heading.innerHTML = "Hello World";
        
        const root = document.getElementById('root');
        root.appendChild(heading);
      </script>
  </body>
</html>


2. What is cdn?
=> A Content Delivery Network (CDN) is a globally distributed network of servers that speeds up the delivery of web content by caching it closer to users. We use CDNs to improve website performance, reduce latency, and handle high traffic loads, ensuring a faster and more reliable online experience for users worldwide 

3. What is crossorigin?
=> Cross-Origin Resource Sharing (CORS) is a security mechanism implemented by web browsers that controls how web pages can request resources from a different origin (domain, protocol, or port) than the one from which the page itself was loaded.

4. What is core react fundamental code?
=> //If we have to do multiple nesting for creating element structures, it is is difficult to maintain,
// That is why we use jsx for craeting tags
//But this is core-react


const parent = React.createElement("div", {id: "parent"},
    React.createElement("div", {id: "child"}, [
    React.createElement("h1", {}, "Hello World from Child"),
    React.createElement("h2", {}, "Hello World from Child")
    ]));

    console.log(parent);

// const heading = React.createElement("h1", { id: "heading" }, "Hello World");

const root = ReactDOM.createRoot(document.getElementById("root"));
console.log(root);

root.render(parent);



5.why is react called a library and not a framework?
=> React's core responsibility is limited to the "view" layer of an application, specifically building user interfaces. 
we can inject react into specific sections also like header, footer any specific part of a website.


6. ***ReactElement is an object. => converts to HTML and browser understands it.

7. What is package.json?
=> package.json is a file that is automatically created when we create a project 
   using npm init command.
   package.json is a configuration of npm.

8. What is a bundler? (like webpack, parcel, vite)
=> A bundler is a tool that takes multiple files and combines them into a single file.
   Bundler bundles our files so that it can ship to production.

9. What is parcel?
=> Parcel is a web application bundler, similar to tools like Webpack and Rollup.
   It takes in various assets like JavaScript, CSS, HTML, and images, and processes them to create optimized bundles for deployment.

   In our vs code we run - npm install -D parcel  --> D for Dev dependency
   In package.json we can see parcel is added in dev dependency.

10. what is difference between (~2.8.3) and (^2.8.3) in package.json?
=> ~2.8.3 means it will update you to all future patch versions, but will not update you to the next minor version.
   ^2.8.3 means it will update you to all future minor/patch versions, but will not update you to the next major version.

11. What is the difference between a package.json and a package-lock.json?
=> package.json is a file that is automatically created when we create a project 
   using npm init command.
   package.json is a configuration of npm.

   package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json.
   It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.
   It is intended to be committed into source repositories, and serves various purposes:
     i. Describe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies.
    ii. Provide a facility for users to "time-travel" to previous states of node_modules without having to commit the entire directory tree.
   iii. To facilitate greater visibility of tree changes through readable diffs.


12. What is the difference between a dependency and a devDependency?
=> Dependencies are the libraries or packages that your project needs to run in a production environment.

   DevDependencies are the libraries or packages that are only needed during the development phase of project.
   These packages are not required for the application to run in a production environment.

13. What is .gitignore file? Why it is needed?
=> .gitignore is a text file that tells Git which files or directories to ignore in a project.
    It is needed to avoid committing unnecessary files, such as build artifacts, temporary files, or sensitive information, to the repository.

14. How to start a project using parcel?
=> For this project - npx parcel index.html
   npx is a package runner tool that comes with npm 5.2+ and higher.
   It is used to execute packages directly from the npm registry without having to install them globally on your system.


15. How to install react and react-dom?
=> npm install react
   npm install react-dom

16. "Browser scripts cannot have import or export." - solve it by adding type="module" in script tag in index.html
   <script type="module" src="./App.js"></script>

17. Parcel - behind the scenes
=> -Devbuild - Transpiler (babel) - converts jsx to js
   -Local server - (localhost:1234)
   -Bundler - bundles our files so that it can ship to production
   -HMR - Hot Module Replacement - reloads the page when we save the file
   -File watcher - watches for file changes (written in c++)
   -caching - Faster builds
   -Image optimization - compresses the images
   -Minification - removes unnecessary spaces, comments, etc
   -Tree shaking - removes unused code
   -consistent hashing - for long term caching
   -code splitting - splits the code into smaller chunks
   -production build - creates a production build of the app
   -Diagonostic - shows errors and warnings in the console
   -HTTPS - serves the app over HTTPS
   -Differential Bundling - creates different bundles for different browsers

18. What is Dist folder?
=> The dist folder, short for "distribution," is a directory commonly used in software development to store the final, production-ready version of a project or application.
   It typically contains optimized and minified files that are ready to be deployed to a web server or distributed to users.












